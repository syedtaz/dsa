* Process

** Why use processes at all?

   Expensive, single program computers in the ye olde days. Compute time
   became cheaper and was under-utilized. Interacticity was also not an
   option. Processes were invented to enable these features.

   provide the illusion of multiple CPUs by virtualizing a single CPU.
   in an ideal case, can only run one instruction at a time. switch
   between multiple processes to concurrently run different tasks at the
   expense of performance in switching.

** Definition

   abstraction of a running program.

** Stacks

   Resources needed for execution in user mode are defined by the CPU arch.
   Usually includes ...

    -- General purpose registers for loading data 
    -- Program counter to track where we are in the program
    -- Stack registers for keeping track of the call stack
    -- Memory segments (text, data, shared library, stack segment)

** Modes

   thread runs in *user mode* or *kernel mode*. in user mode, therad execs
   application code without kernel privileges. if it needs something that
   requires elevated access, it makes a system call and runs in kernel mode.

    ---

**** why?

   don't want to give unbounded access to a process. for example, a process
   might need to read a file but might not have access to a file. therefore,
   we wrap this operation in a syscall and force the kernel to decide whether
   the user has the necessary credentials for reading the file.

    ---

** Process credentials
  pid unique nonnegative integer when process is created with /fork/.
  get process' own pid with getpid(2). get parent pid using getppid(2).

*** Terminal control

   a process group is a collection of processes that share the same process 
   group id. shell creates new process groups for processes in a pipeline
   or those that are used for a single command (?)

   a session is a collection of process that share the same session id. *all
   members of a process group also have the same session id*. 

    creator of the session is the session leader. when a session leader opens
   the terminal it establishes the controlling terminal of the session.[1] a
   terminal can control at most one session.

    only one foreground job. only fg job can read from terminal. when terminal
   keys generate a signal they are only send to the fg job.

*** User/Group Control

    process has multiple user and group ids.
    -- real ids represent the user and group that owns the process.
    -- effective ids are used by the kernel to dertermine the permissions
       that the process has when accessing shared resources.
    -- saved set ids to switch between ids its real id and saved id. (?)
    -- supplementary group ids to access files (for linux)

   [1]: O_NOCTTY

